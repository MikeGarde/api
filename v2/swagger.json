{
  "swagger": "2.0",
  "info": {
    "title": "Api Next",
    "description": "Documentation for FDC's API",
    "termsOfService": "http://helloreverb.com/terms/",
    "contact": {
      "email": "apiteam@fulfillment.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": 1
  },
  "basePath": "http://localhost",
  "paths": {
    "/acl": {
      "get": {
        "tags": [
          "ACL"
        ],
        "summary": "Get ACL resources",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getACL",
        "parameters": [
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Merchant IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "$ref": "#/parameters/authHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/carriers": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Get a list of Carriers",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getCarriers",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter by Carrier Method IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Filter Carrier Methods by name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarrierMethod"
              }
            }
          }
        }
      }
    },
    "/carriers/{id}": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Get a Carrier by Id",
        "operationId": "getCarrier",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of Carrier that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/CarrierMethod"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Carrier not found"
          }
        }
      }
    },
    "/carriers/{id}/methods": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Get a Carrier Methods for a Carrier",
        "operationId": "getCarrierMethods",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of Carrier that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Filter Carrier Methods by Merchant Ids",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarrierMethod"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Carrier not found"
          }
        }
      }
    },
    "/carriermethods": {
      "get": {
        "tags": [
          "CarrierMethod"
        ],
        "summary": "Get a list of Carrier Methods",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getCarrierMethods",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter by Carrier Method IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Filter Carrier Methods by name",
            "required": false,
            "type": "string"
          },
          {
            "name": "warehouseIds",
            "in": "query",
            "description": "Filter Carrier Methods by warehouse",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maximumWeight",
            "in": "query",
            "description": "Filter Carrier Methods by their maximum weight",
            "required": false,
            "type": "integer"
          },
          {
            "name": "minimumWeight",
            "in": "query",
            "description": "Filter Carrier Methods by their minimum weight",
            "required": false,
            "type": "integer"
          },
          {
            "name": "costGreaterThan",
            "in": "query",
            "description": "Filter Carrier Methods by cost",
            "required": false,
            "type": "integer"
          },
          {
            "name": "costLessThan",
            "in": "query",
            "description": "Filter Carrier Methods by cost",
            "required": false,
            "type": "integer"
          },
          {
            "name": "carrierIds",
            "in": "query",
            "description": "Filter Carrier Methods Carrier Id",
            "required": false,
            "type": "integer"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model. Available properties: <b>carrier</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarrierMethod"
              }
            }
          }
        }
      }
    },
    "/carriermethods/{id}": {
      "get": {
        "tags": [
          "CarrierMethod"
        ],
        "summary": "Get a Carrier Method by Id",
        "operationId": "getCarrierMethod",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of Carrier Method that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>carrier</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/CarrierMethod"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Inventory not found"
          }
        }
      }
    },
    "/inserts/{id}": {
      "get": {
        "tags": [
          "Inserts"
        ],
        "summary": "Find an insert by Id",
        "description": "Returns an insert based on Id",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of insert that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Sku"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sku not found"
          }
        }
      },
      "put": {
        "tags": [
          "Inserts"
        ],
        "summary": "Update an existing insert",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the insert",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Insert object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sku"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Insert not found"
          },
          "405": {
            "description": "Validation exception"
          },
          "403": {
            "description": "Can only update skus for your own merchant"
          }
        }
      },
      "delete": {
        "tags": [
          "Inserts"
        ],
        "summary": "Deletes an Insert",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of insert to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "Insert not found"
          },
          "403": {
            "description": "Insufficient privileges to access this insert"
          }
        }
      }
    },
    "/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get a list of inventory",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getInventory",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter by inventory IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "productNames",
            "in": "query",
            "description": "Filter inventory by products with names like the given terms",
            "required": false,
            "type": "string"
          },
          {
            "name": "warehouseIds",
            "in": "query",
            "description": "Filter inventory by warehouse",
            "required": false,
            "type": "integer"
          },
          {
            "name": "productTypes",
            "in": "query",
            "description": "Filter inventory by products with the given type",
            "required": false,
            "type": "string"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>warehouse,product,merchant</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Inventory"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create new inventory entry for a product",
        "operationId": "createInventory",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The inventory to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>warehouse,product,merchant</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid inventory object"
          },
          "403": {
            "description": "You do not have permission to create inventory"
          }
        }
      }
    },
    "/inventory/{id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get an inventory item by Id",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of inventory that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>warehouse,product,merchant</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Inventory not found"
          }
        }
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Update an existing inventory",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          },
          "403": {
            "description": "Can only update users for your own merchant"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory"
        ],
        "summary": "Deletes an inventory",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of inventory to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "Inventory not found"
          },
          "403": {
            "description": "You do not have permission to delete inventory"
          }
        }
      }
    },
    "/inventory/{id}/audits": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory level audits",
        "operationId": "getInventoryLevelAudit",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "path",
            "description": "Page to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit the number of results",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryAudit"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Inventory not found"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get all jobs",
        "operationId": "getJobs",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter jobs created after this date",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter jobs created before this date",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status IDs to filter current status of a Job by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Merchant IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Types of Jobs to get",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Find Job by Id",
        "description": "Returns a Job based on Id",
        "operationId": "getJob",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of Job that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Job not found"
          }
        }
      }
    },
    "/audits/balance": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get a list of audits of the balance for a merchant",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getBalanceAudit",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Merchant IDs to filter by (restricted to FDC employees)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/MerchantBalanceAudit"
            }
          }
        }
      }
    },
    "/merchants": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get a list of merchants",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getMerchants",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Merchant IDs to filter by (restricted to FDC employees)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Merchant names to filter by (restricted to FDC employees)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Merchant"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Merchant"
        ],
        "summary": "Create a new merchant",
        "operationId": "createMerchant",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The merchant to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid merchant object"
          },
          "401": {
            "description": "You do not have permission to create merchants"
          }
        }
      }
    },
    "/merchants/{id}": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Find merchant by Id",
        "description": "Returns a merchant based on Id",
        "operationId": "getMerchant",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      },
      "put": {
        "tags": [
          "Merchant"
        ],
        "summary": "Update an existing merchant",
        "description": "",
        "operationId": "updateMerchant",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Merchant object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/merchants/{id}/fees/{warehouseId}": {
      "put": {
        "tags": [
          "Merchant"
        ],
        "summary": "Update an existing merchant's fees for the specified warehouse",
        "description": "",
        "operationId": "updateMerchantFee",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Merchant Fee object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MerchantFee"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Id warehouse this fee is for",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Merchant"
        ],
        "summary": "Remove a fee to an existing merchant",
        "description": "",
        "operationId": "removeMerchantFee",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Id of the warehouse this fee is for",
            "required": true,
            "type": "integer"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/merchants/{id}/fees": {
      "post": {
        "tags": [
          "Merchant"
        ],
        "summary": "Add a fee to an existing merchant",
        "description": "",
        "operationId": "addMerchantFee",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Merchant Fee object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MerchantFee"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/merchants/{id}/products": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get all products for a merchant",
        "operationId": "getMerchantProducts",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>originalProduct</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      }
    },
    "/merchants/{id}/skus": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get all skus for a merchant",
        "operationId": "getMerchantSkus",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>skuProducts</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sku"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      }
    },
    "/merchants/{id}/inventory": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get all inventory for a merchant",
        "operationId": "getMerchantInventory",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>warehouse,product</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Inventory"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      }
    },
    "/merchants/{id}/users": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get all user for a merchant",
        "operationId": "getMerchantUsers",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      }
    },
    "/merchants/{id}/audits/orders": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get order audit data for a merchant",
        "operationId": "getMerchantOrderAudit",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "path",
            "description": "Page to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderAccountingAudit"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      }
    },
    "/merchants/audits/orders": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get order audit data for a merchant",
        "operationId": "getMerchantOrderAudit",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter orders created after this date",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter orders created before this date",
            "required": false,
            "type": "string"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Merchant IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "warehouseIds",
            "in": "query",
            "description": "Warehouse IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "path",
            "description": "Page to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderAccountingAudit"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      }
    },
    "/merchants/{id}/audits/balance": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get balance audit data for a merchant",
        "operationId": "getMerchantBalanceAudit",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "path",
            "description": "Page to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MerchantBalanceAudit"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          }
        }
      }
    },
    "/merchants/{id}/methods": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "Get a list of merchant shipping methods",
        "operationId": "getMerchantMethods",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>carrier</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get a list of orders",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n  *              EX: 465,123,644 <br/>\n  *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getOrders",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter orders created after this date",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter orders created before this date",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Order IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "merchantOrderIds",
            "in": "query",
            "description": "Merchant Order IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Merchant IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusIds",
            "in": "query",
            "description": "Filter orders with this status",
            "required": false,
            "type": "integer"
          },
          {
            "name": "dateType",
            "in": "query",
            "description": "The date type to search by",
            "required": false,
            "type": "integer",
            "enum": "['recordedOn','shippedOn','departedOn', 'returnedOn']"
          },
          {
            "name": "warehouseIds",
            "in": "query",
            "description": "Warehouse IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusIds",
            "in": "query",
            "description": "Status IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "shipStatusIds",
            "in": "query",
            "description": "Shipment Status IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "carrierMethodIds",
            "in": "query",
            "description": "Carrier Shipping Method IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "carrierIds",
            "in": "query",
            "description": "Carrier IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "firstNames",
            "in": "query",
            "description": "Filter Orders by a consignee first name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "lastNames",
            "in": "query",
            "description": "Filter Orders by a consignee last name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "address1",
            "in": "query",
            "description": "Filter Orders by a consignee address line 1",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "address2",
            "in": "query",
            "description": "Filter Orders by a consignee address line 2",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cities",
            "in": "query",
            "description": "Filter Orders by a consignee city",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "states",
            "in": "query",
            "description": "Filter Orders by a consignee state",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "postalCodes",
            "in": "query",
            "description": "Filter Orders by a consignee zip",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "countryIds",
            "in": "query",
            "description": "Filter Orders by a consignee's country. Accepts either Id or ISO2",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>statusHistory, orderItems, orderSkus, fipStatusHistory, orderProfileDetails</b>",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Column name to sort by. Column name + ASC or DESC",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Must provide a fromDate and toDate or identifiers."
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a new order",
        "operationId": "createOrder",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The order to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewOrder"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>statusHistory, orderItems, orderSkus, fipStatusHistory</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to create orders"
          }
        }
      }
    },
    "/orders/batch": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Batch upload orders from csv",
        "description": "This request must be made as <strong>form-data</strong>. The only accepted format is <strong>csv</strong>.",
        "operationId": "batchUploadOrders",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The CSV file containing orders",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Find order by Id",
        "description": "Returns a order based on Id",
        "operationId": "getOrder",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of order that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>statusHistory, orderItems, orderSkus, fipStatusHistory</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/orders/{id}/recipient": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get an order recipient",
        "operationId": "getOrderRecipient",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>iso</b>",
            "required": false,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "description": "If recipient is in US then run address through validation service before returning",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to update orders"
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update an order recipient",
        "operationId": "updateOrderRecipient",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The recipient to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewContactInfo"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to update orders"
          }
        }
      }
    },
    "/orders/{id}/recipient/versions": {
      "get": {
        "summary": "Get all versions of order recipient",
        "operationId": "getOrderRecipientVersions",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>iso</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          }
        }
      }
    },
    "/orders/{id}/status": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update an order's status",
        "operationId": "updateStatus",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of order that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The body of the request, containing the status and, optionally, a reason",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to update orders"
          }
        }
      }
    },
    "/orders/{id}/fipStatus": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update an order's fip status",
        "operationId": "updateFIPStatus",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of order that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The body of the request, containing the fip status ID and notes.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFipStatus"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to update orders"
          }
        }
      }
    },
    "/orders/{id}/skus": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add a new sku to an order",
        "operationId": "addOrderSku",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The order sku to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewOrderItem"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to update orders"
          }
        }
      }
    },
    "/orders/{id}/skus/{orderSkuId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update a sku for an order",
        "operationId": "updateOrderSku",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The order sku to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewOrderItem"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to update orders"
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Deletes a sku and all associated order items from an order",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of order",
            "required": true,
            "type": "integer"
          },
          {
            "name": "orderSkuId",
            "in": "path",
            "description": "Id of the orderSku to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "Order sku not found"
          },
          "403": {
            "description": "You do not have permission to delete skus from this order"
          }
        }
      }
    },
    "/orders/{id}/items/{orderItemId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update an order item",
        "operationId": "updateOrderItem",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The order item to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewOrderItem"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid order object"
          },
          "401": {
            "description": "You do not have permission to update orders"
          }
        }
      }
    },
    "/orders/{id}/cancel": {
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel an order",
        "operationId": "cancelOrder",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "orderId",
            "in": "query",
            "description": "Order ID to cancel",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/orders/{id}/statusHistory": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get a history of statuses for an order",
        "operationId": "getOrderStatusHistory",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderStatus"
              }
            }
          }
        }
      }
    },
    "/orders/{id}/tracking": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get tracking information for an order",
        "operationId": "getOrderTracking",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/orders/{id}/ship": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Ship and Order",
        "operationId": "shipOrder",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "ignoreInventory",
            "in": "query",
            "description": "Do not adjust inventory after shipped",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "weightOverride",
            "in": "query",
            "description": "Use this weight instead of the calculated weight for the order",
            "required": false,
            "type": "number"
          },
          {
            "name": "batchId",
            "in": "query",
            "description": "Add this batch Id to order after shipping",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/orders/{id}/void": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Void an order",
        "operationId": "voidOrder",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "orderId",
            "in": "query",
            "description": "Order ID to void",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skipInventoryChanges",
            "in": "query",
            "description": "Do not adjust inventory after voiding",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skipFIPStatus",
            "in": "query",
            "description": "Do not change FIP Status after voiding",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/orders/{id}/print": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Print an order",
        "operationId": "printOrder",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Order ID to print",
            "required": true,
            "type": "integer"
          },
          {
            "name": "destination",
            "in": "query",
            "description": "Printer id or name. If none is specified an image of the documentType will be returned.",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "The document type to print with. If no type is specified the default for the printer will be used.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/orders/{id}/approve": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Approve an Order",
        "operationId": "approveOrder",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "ignoreTestOrder",
            "in": "query",
            "description": "Do not look for test order conditions",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ignoreStatusHolds",
            "in": "query",
            "description": "Ignore current status hold for order and approve anyway",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ignoreMerchantHolds",
            "in": "query",
            "description": "Ignore merchant holds-client during approval",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/audits/orderProfile": {
      "get": {
        "tags": [
          "OrderProfile"
        ],
        "summary": "Audit order profiles",
        "operationId": "getOrderProfileAudits",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "processResults",
            "in": "query",
            "description": "Should process results?",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/events/{orderId}": {
      "get": {
        "tags": [
          "Order Status Event"
        ],
        "summary": "Get all events for an order.",
        "description": "Returns an array of Events based on their order id",
        "operationId": "getEventsByOrderId",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that is associated with the events being fetched.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "404": {
            "description": "No events with that order id exists."
          },
          "400": {
            "description": "That is an invalid order id."
          },
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderStatusEvent"
              }
            }
          }
        }
      }
    },
    "/events/{orderId}/last": {
      "get": {
        "tags": [
          "Order Status Event"
        ],
        "summary": "Get the most recent event for an order.",
        "description": "Returns the last Event based on it's order id",
        "operationId": "getLastOrderStatusEvent",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that is associated with the event being fetched.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "404": {
            "description": "No events with that order id exists."
          },
          "400": {
            "description": "That is an invalid order id."
          },
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": [
          "Order Status Event"
        ],
        "summary": "Add a new event for an order",
        "operationId": "addOrderStatusEvent",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The event to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Events"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Events object"
          },
          "401": {
            "description": "You do not have permission to update Events"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get a list of products",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getProducts",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "productIds",
            "in": "query",
            "description": "Product IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Merchant IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Product types to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Product names to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "descriptions",
            "in": "query",
            "description": "Product descriptions to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "namesOrDescriptions",
            "in": "query",
            "description": "Filter by name or description",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skus",
            "in": "query",
            "description": "Filter Products by the name of a sku associated with it",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>originalProduct,merchant</b>",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Column name to sort by. Column name + ASC or DESC",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a new product",
        "operationId": "createProduct",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The product to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>originalProduct,merchant</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid product object"
          },
          "403": {
            "description": "You do not have permission to create products"
          }
        }
      }
    },
    "/products/batch": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Batch upload products from CSV or XML",
        "description": "This request must be made as <strong>form-data</strong>. </br>\n     *             Accepted formats are <strong>csv</strong> and <strong>xml</strong>",
        "operationId": "batchUploadProducts",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file containing products",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find a product by Id",
        "description": "Returns a product based on Id",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of product that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>originalProduct,merchant</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing product",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          },
          "405": {
            "description": "Validation exception"
          },
          "403": {
            "description": "Can only update products for your own merchant"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Deletes a product",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of product to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "Product not found"
          },
          "403": {
            "description": "Insufficient privaleges to access this product"
          }
        }
      }
    },
    "/products/{id}/inserts": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get the inserts available for this product",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductInsert"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a new insert association for this product",
        "description": "If you pass an existing insert -- IE an insert with an existing ID -- a relationship between the existing insert and this product will be created.\n     *\n     * If no ID is supplied (or the ID is 0) a new insert will be created.",
        "operationId": "createProductInserts",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The insert(s) to create",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductInsert"
              }
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductInsert"
              }
            }
          },
          "400": {
            "description": "Invalid insert object"
          },
          "403": {
            "description": "Insufficient permissions to create inserts for this product"
          }
        }
      }
    },
    "/products/{id}/inserts/{insertId}": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Removes a product insert association",
        "description": "Unless explicitly stated with the <b>deleteInsert</b> param <b>only the association between the insert and the product will be removed.</b>",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product",
            "required": true,
            "type": "integer"
          },
          {
            "name": "insertId",
            "in": "path",
            "description": "Id of the insert relationship to delete",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deleteInsert",
            "in": "query",
            "description": "Indicate whether the insert should be deleted.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "404": {
            "description": "Insert relationship not found"
          },
          "403": {
            "description": "Insufficient privileges to access this insert relationship"
          }
        }
      }
    },
    "/products/{id}/skus": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get the SKUs associated with this product",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SkuProduct"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/{id}/skus/": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a new sku association for this product",
        "description": "If you pass an existing SKU -- IE a SKU with an existing ID -- a relationship between the existing SKU and this product will be created.\n     *\n     * If no ID is supplied (or the ID is 0) a new SKU will be created.",
        "operationId": "createSkuProduct",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The insert(s) to create",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SkuProduct"
              }
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SkuProduct"
              }
            }
          },
          "400": {
            "description": "Invalid sku object"
          },
          "403": {
            "description": "Insufficient permissions to create skus for this product"
          }
        }
      }
    },
    "/products/{id}/skus/{skuId}": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Removes a sku association",
        "description": "Unless explicitly stated with the <b>deleteSku</b> param <b>only the association between the sku and the product will be removed.</b>",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the product",
            "required": true,
            "type": "integer"
          },
          {
            "name": "skuId",
            "in": "path",
            "description": "Id of the sku relationship to remove",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deleteSku",
            "in": "path",
            "description": "Indicate whether the sku should be deleted",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "404": {
            "description": "Sku relationship not found"
          },
          "403": {
            "description": "Insufficient privileges to access this sku relationship"
          }
        }
      }
    },
    "/products/{id}/inventory": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get any inventory for this product",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Inventory"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/jobs": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get overview of product jobs",
        "operationId": "getProductJobs",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          }
        }
      }
    },
    "/reports/{reportName}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Returns a report",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Start date for this report. Ex 2015-09-10",
            "required": true,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "End date for this report. Ex 2015-09-10",
            "required": true,
            "type": "string"
          },
          {
            "name": "reportName",
            "in": "query",
            "description": "The type of report to return",
            "required": false,
            "type": "string",
            "enum": "['dashboard','inventoryTransactions','invoicePreview', 'outgoing', 'orderStatus']"
          }
        ],
        "responses": {
          "404": {
            "description": "Nothing found"
          }
        }
      }
    },
    "/reports/prepare/{reportName}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Generates the data behind a report",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "reportName",
            "in": "path",
            "description": "The type of report to return",
            "required": false,
            "type": "string",
            "enum": "['EndOfDayAccounting']"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Start date for this report. Ex 2016-04-06",
            "required": true,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "End date for this report. Ex 2016-04-06",
            "required": true,
            "type": "string"
          },
          {
            "name": "Merchants",
            "in": "query",
            "description": "limit scope of preparing to one or more clients",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "404": {
            "description": "Nothing found"
          }
        }
      }
    },
    "/reports/execute/{reportName}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Generates the data behind a report",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "reportName",
            "in": "path",
            "description": "The type of report to return",
            "required": true,
            "type": "string"
          },
          {
            "name": "reportDate",
            "in": "query",
            "description": "Date for this report. Ex 2016-04-06",
            "required": true,
            "type": "string"
          },
          {
            "name": "divertEmail",
            "in": "query",
            "description": "Email to divert all reports to.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "merchantId",
            "in": "query",
            "description": "Merchant Id to specify which reports to send.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Nothing found"
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/reportSubscriptions": {
      "get": {
        "tags": [
          "Report Subscription"
        ],
        "summary": "Find all report subscriptions",
        "description": "Returns all report subscriptions based on report ID and merchant ID",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "merchantId",
            "in": "query",
            "description": "Merchant ID to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "reportIds",
            "in": "query",
            "description": "ID of the report subscriptions to get",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "ID of the report subscriptions to get",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ReportSubscription not found"
          }
        }
      },
      "post": {
        "tags": [
          "Report Subscription"
        ],
        "summary": "Add a report subscription.",
        "description": "Need to supply at least Merchant ID, Report ID, and Email.",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The Report Subscription to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportSubscription"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Report Subscription supplied"
          },
          "404": {
            "description": "Merchant doesn't exist."
          }
        }
      }
    },
    "/reportSubscriptions/{id}": {
      "put": {
        "tags": [
          "Report Subscription"
        ],
        "summary": "Update a report subscription's email.",
        "description": "ID for the Report Subscription is needed.",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the report subscription",
            "required": true,
            "type": "integer"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email to change the report to.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ReportSubscription not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Report Subscription"
        ],
        "summary": "Delete a report subscription.",
        "description": "Delete a report subscription based on it's ID.",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of report subscription",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Report Subscription ID supplied."
          },
          "404": {
            "description": "Merchant doesn't exist."
          }
        }
      }
    },
    "/shippingContainers": {
      "get": {
        "tags": [
          "Shipping Container"
        ],
        "summary": "Get a list of Shipping Containers",
        "operationId": "getShippingContainers",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "shippingContainerIds",
            "in": "query",
            "description": "Filter by ShippingContainer IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "shippingContainerTypeIds",
            "in": "query",
            "description": "Filter by ShippingContainerType IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "productIds",
            "in": "query",
            "description": "Filter by Product IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Filter by Merchant IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "warehouseIds",
            "in": "query",
            "description": "Filter by Warehouse IDs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "description": "Filter by Service IDs",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingContainer"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Shipping Container"
        ],
        "summary": "Create a new ShippingContainer",
        "operationId": "createShippingContainer",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The ShippingContainer to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateShippingContainerRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ShippingContainer object"
          },
          "403": {
            "description": "You do not have permission to create ShippingContainers"
          }
        }
      }
    },
    "/shippingContainers/types": {
      "get": {
        "tags": [
          "Shipping Container"
        ],
        "summary": "Get a list of Shipping Containers Types",
        "operationId": "getShippingContainerTypes",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "shippingContainerTypeIds",
            "in": "query",
            "description": "Filter by ShippingContainerType IDs",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingContainerType"
              }
            }
          }
        }
      }
    },
    "/shipmethods": {
      "get": {
        "tags": [
          "Shipping Method"
        ],
        "summary": "Get a list of merchant shipping methods",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getMerchantMethods",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Shipping Method Is to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "warehouseIds",
            "in": "query",
            "description": "Filter shipping method by warehouse associated with it",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Filter shipping method by name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "countryIds",
            "in": "query",
            "description": "Filter shipping method by country. Accepts either Id or ISO2",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MerchantShippingMethod"
              }
            }
          }
        }
      }
    },
    "/shipmethods/{id}": {
      "get": {
        "tags": [
          "Shipping Method"
        ],
        "summary": "Find merchant method by Id",
        "description": "Returns a merchant method based on Id",
        "operationId": "getMerchantMethod",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of merchant method for this merchant that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant method not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Shipping Method"
        ],
        "summary": "Deletes a merchant shipping method",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of merchant shipping method to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "Shipping Method not found"
          },
          "403": {
            "description": "Insufficient privaleges to access this shipping method"
          }
        }
      }
    },
    "/skus": {
      "get": {
        "tags": [
          "Sku"
        ],
        "summary": "Get a list of skus",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getSkus",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Sku IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Filter SKUs by sku name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Filter SKUs by owning merchant Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "productIds",
            "in": "query",
            "description": "Filter SKUs by owning products Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "productNames",
            "in": "query",
            "description": "Filter SKUs by the name of products associated with a sku",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "productDescriptions",
            "in": "query",
            "description": "Filter SKUs by the description of products associated with a sku",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>skuProducts,merchant</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sku"
              }
            }
          }
        }
      }
    },
    "/skus/{id}": {
      "get": {
        "tags": [
          "Sku"
        ],
        "summary": "Find a sku by Id",
        "description": "Returns a sku based on Id",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of sku that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hydrate",
            "in": "query",
            "description": "Comma-delimited list of properties to include on model response. Available properties: <b>skuProducts,merchant</b>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sku not found"
          }
        }
      },
      "put": {
        "tags": [
          "Sku"
        ],
        "summary": "Update an existing sku",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sku",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Sku object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sku"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sku not found"
          },
          "405": {
            "description": "Validation exception"
          },
          "403": {
            "description": "Can only update skus for your own merchant"
          }
        }
      },
      "delete": {
        "tags": [
          "Sku"
        ],
        "summary": "Deletes a sku",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of sku to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "Sku not found"
          },
          "403": {
            "description": "Insufficient privileges to access this sku"
          }
        }
      }
    },
    "/skus/{id}/products": {
      "get": {
        "tags": [
          "Sku"
        ],
        "summary": "Get all SkuProducts for a given Sku",
        "description": "Returns an array of SkuProducts associated with a given Sku",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of sku that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sku not found"
          },
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SkuProduct"
              }
            }
          }
        }
      }
    },
    "/support/orderstatus": {
      "get": {
        "tags": [
          "Support Data"
        ],
        "summary": "Get a list of Order Statuses",
        "operationId": "getOrderStatuses",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Status"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of users",
        "description": "To use multiple arguments in a filter separate values with a comma. <br/>\n     *              EX: 465,123,644 <br/>\n     *              A valid api call with multiple filters would look like this: http://api.fulfillment.com/endpoint?warehouses=10,12,13",
        "operationId": "getUsers",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pageIndex"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "User IDs to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "merchantIds",
            "in": "query",
            "description": "Merchant IDs to filter by (restricted to FDC employees)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Filter by user names",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "emails",
            "in": "query",
            "description": "Filter by user emails",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "namesOrEmails",
            "in": "query",
            "description": "Filter user names or emails by the terms given",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter user by status",
            "required": false,
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The user to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user object"
          },
          "403": {
            "description": "You do not have permission to create users"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by Id",
        "description": "Returns a user based on Id",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update an existing user",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          },
          "403": {
            "description": "Can only update users for your own merchant"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of user to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "User not found"
          },
          "403": {
            "description": "You do not have permission to delete users"
          }
        }
      }
    },
    "/users/{id}/acl": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Set a user's roles and permissions",
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "An array of roles and permissions names",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/authHeader"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          },
          "403": {
            "description": "Can only update users for your own merchant"
          }
        }
      }
    },
    "/warehouses": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Get all warehouses",
        "operationId": "getWarehouses",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "includeFees",
            "in": "query",
            "description": "include fees in response. Note: Only if authorized",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Warehouse"
              }
            }
          }
        }
      }
    },
    "/warehouses/{warehouseId}/fees": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Get a warehouse fees",
        "operationId": "getWarehouseFees",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WarehouseFee"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Create a Warehouse Fee",
        "operationId": "createWarehouseFees",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The warehouse fee to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WarehouseFee"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid warehouse fee object"
          },
          "401": {
            "description": "You do not have permission to create warehouse fees"
          }
        }
      }
    },
    "/warehouses/{warehouseId}/fees/{feeId}": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Get a warehouse fee",
        "operationId": "getWarehouseFee",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the warehouse fee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Warehouse Fee not found"
          }
        }
      },
      "put": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Update an existing warehouse fees",
        "description": "",
        "operationId": "updateWarehouseFee",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The updated Warehouse Fee",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WarehouseFee"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Id warehouse this fee is for",
            "required": true,
            "type": "integer"
          },
          {
            "name": "feeId",
            "in": "path",
            "description": "ID of warehouse fee that should be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Merchant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Remove a fee from a warehouse",
        "description": "",
        "operationId": "removeWarehouseFee",
        "parameters": [
          {
            "$ref": "#/parameters/authHeader"
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Id of the warehouse this fee is for",
            "required": true,
            "type": "integer"
          },
          {
            "name": "feeId",
            "in": "path",
            "description": "ID of fee that should be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Warehouse not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Permission": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "fdcOnly": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Role": {
      "required": "{ }",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "merchant": {
          "$ref": "#/definitions/Merchant"
        }
      },
      "type": "object"
    },
    "ApiKey": {
      "required": "{ }",
      "properties": {
        "key": {
          "type": "string"
        },
        "merchantId": {
          "type": "integer"
        },
        "isTesting": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "InventoryAudit": {
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "recordedBy": {
          "$ref": "#/definitions/User"
        }
      },
      "type": "object"
    },
    "MerchantBalanceAudit": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "float"
        },
        "oldBalance": {
          "type": "number",
          "format": "float"
        },
        "newBalance": {
          "type": "number",
          "format": "float"
        },
        "recordedOn": {
          "type": "string",
          "format": "date-time"
        },
        "isDiscrepancy": {
          "description": "Whether this change accounts for a discrepancy in balance",
          "type": "boolean"
        },
        "accountExecutive": {
          "description": "Partial of the User who is the account exec for this merchant",
          "$ref": "#/definitions/User"
        },
        "merchant": {
          "description": "Partial of the Merchant for this audit",
          "$ref": "#/definitions/Merchant"
        }
      },
      "type": "object"
    },
    "OrderAccountingAudit": {
      "properties": {
        "orderId": {
          "type": "integer"
        },
        "productCount": {
          "type": "integer"
        },
        "insertCount": {
          "type": "integer"
        },
        "printCount": {
          "type": "integer"
        },
        "shippingBoxCount": {
          "type": "integer"
        },
        "pickingFee": {
          "type": "number",
          "format": "float"
        },
        "kittingFee": {
          "type": "number",
          "format": "float"
        },
        "insertFee": {
          "type": "number",
          "format": "float"
        },
        "printFee": {
          "type": "number",
          "format": "float"
        },
        "shippingBoxFee": {
          "type": "number",
          "format": "float"
        },
        "fulfillmentFee": {
          "type": "number",
          "format": "float"
        },
        "shippingFee": {
          "type": "number",
          "format": "float"
        },
        "envelopeFee": {
          "type": "number",
          "format": "float"
        },
        "total": {
          "type": "number",
          "format": "float"
        },
        "recordedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "ContactInfo": {
      "properties": {
        "id": {
          "description": "ContactInfo unique identifier",
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "integer"
        },
        "fax": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "country": {
          "description": "Client provided country name",
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "iso2": {
          "description": "Country object associated with this consignee",
          "type": "string"
        },
        "iso2Redundant": {
          "type": "string"
        },
        "ignoreApproval": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Inventory": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "Unique identifier for this invenetory",
          "type": "integer"
        },
        "warehouseId": {
          "description": "ID of the warehouse",
          "type": "integer"
        },
        "quantity": {
          "description": "The current quantity of stock for this inventory",
          "type": "integer"
        },
        "location": {
          "description": "Location of this inventory within the warehouse, if specified",
          "type": "string"
        },
        "isPriority": {
          "description": "Indicates whether the inventory gets priority shipping, when available",
          "type": "boolean"
        },
        "reservedQuantity": {
          "description": "The reserved quantity of stock for this inventory",
          "type": "integer"
        },
        "isActive": {
          "type": "boolean"
        },
        "isPerishable": {
          "description": "Is this product perishable?",
          "type": "boolean"
        },
        "isDangerous": {
          "description": "Is this product dangerous?",
          "type": "boolean"
        },
        "isFragile": {
          "description": "Is this product fragile?",
          "type": "boolean"
        },
        "length": {
          "description": "Length of the product in INCHES",
          "type": "number",
          "format": "float"
        },
        "width": {
          "description": "Width of the product in INCHES",
          "type": "number",
          "format": "float"
        },
        "height": {
          "description": "Height of the product in INCHES",
          "type": "number",
          "format": "float"
        },
        "weight": {
          "description": "Weight of the product in OUNCES",
          "type": "number",
          "format": "float"
        },
        "warehouse": {
          "description": "Partial for the warehouse this inventory belongs to",
          "$ref": "#/definitions/Warehouse"
        },
        "merchant": {
          "description": "Partial for the merchant this inventory belongs to",
          "$ref": "#/definitions/Merchant"
        },
        "product": {
          "description": "Partial for the product this inventory belongs to",
          "$ref": "#/definitions/Product"
        }
      },
      "type": "object"
    },
    "Job": {
      "required": "{ }",
      "properties": {
        "id": {
          "type": "integer"
        },
        "jobType": {
          "description": "The type of job run",
          "type": "string"
        },
        "status": {
          "description": "Current status of this job\"",
          "type": "integer"
        },
        "itemsFound": {
          "description": "Number of items discovered in the provided data"
        },
        "itemsProcessed": {
          "description": "Number of items created from the provided data\""
        },
        "itemErrors": {
          "description": "Number of items with errors from the provided data"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "fileName": {
          "description": "Name of the original file provided",
          "type": "string"
        },
        "convertedFilePath": {
          "description": "Path of the converted file",
          "type": "string"
        },
        "processReportFilePath": {
          "description": "Path of the report detailing this job",
          "type": "string"
        },
        "history": {
          "$ref": "#/definitions/JobHistory"
        },
        "attempts": {}
      },
      "type": "object"
    },
    "JobHistory": {
      "required": "{ }",
      "properties": {
        "id": {
          "type": "integer"
        },
        "job": {
          "$ref": "#/definitions/Job"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "required": "{ }",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrintJob": {
      "properties": {
        "printer": {},
        "shipJob": {},
        "id": {
          "type": "integer"
        },
        "jobType": {
          "description": "The type of job run",
          "type": "string"
        },
        "status": {
          "description": "Current status of this job\"",
          "type": "integer"
        },
        "itemsFound": {
          "description": "Number of items discovered in the provided data"
        },
        "itemsProcessed": {
          "description": "Number of items created from the provided data\""
        },
        "itemErrors": {
          "description": "Number of items with errors from the provided data"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "fileName": {
          "description": "Name of the original file provided",
          "type": "string"
        },
        "convertedFilePath": {
          "description": "Path of the converted file",
          "type": "string"
        },
        "processReportFilePath": {
          "description": "Path of the report detailing this job",
          "type": "string"
        },
        "history": {
          "$ref": "#/definitions/JobHistory"
        },
        "attempts": {}
      },
      "type": "object"
    },
    "PackingSlip": {
      "properties": {
        "headerItems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "barCodeScanValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackingSlipItem"
          }
        }
      },
      "type": "object"
    },
    "PackingSlipItem": {
      "properties": {
        "product": {
          "$ref": "#/definitions/Product"
        },
        "quantity": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Merchant": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "Merchant unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "Merchant name",
          "type": "string"
        },
        "lastRecordedOn": {
          "type": "string"
        },
        "accountBal": {
          "description": "Account Balance",
          "type": "number",
          "format": "double"
        },
        "holdsFunds": {
          "description": "Merchant on hold because of lack of funds",
          "type": "boolean"
        },
        "holdsClient": {
          "description": "Merchant on hold for another reason",
          "type": "boolean"
        },
        "orderGrouping": {
          "description": "Whether a Merchant's orders should be grouped",
          "type": "boolean"
        },
        "blockShippingApi": {
          "description": "Boolean",
          "type": "boolean"
        },
        "salesExecutive": {
          "type": "integer"
        },
        "accountManager": {
          "description": "User ID for the Sales Executive for this Merchant",
          "type": "integer"
        },
        "isActive": {
          "description": "User ID for the Account Manager for this Merchant",
          "type": "boolean"
        },
        "fees": {
          "description": "Fulfillment Fees for this Merchant",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MerchantFees"
          }
        }
      },
      "type": "object"
    },
    "MerchantFees": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "The name of the warehouse this fee is at",
          "type": "integer"
        },
        "warehouseId": {
          "description": "Unique identifier for this merchant's warehouse fees",
          "type": "integer"
        },
        "merchantId": {
          "description": "Unique identifier the merchant",
          "type": "integer"
        },
        "fulfillmentFee": {
          "description": "Fee for fulfillment",
          "type": "number",
          "format": "double"
        },
        "pickingFee": {
          "description": "Fee for picking",
          "type": "number",
          "format": "double"
        },
        "kittingFee": {
          "description": "Fee for kitting",
          "type": "number",
          "format": "double"
        },
        "printingFee": {
          "description": "Fee for printing",
          "type": "number",
          "format": "double"
        },
        "returnFee": {
          "description": "Fee for returns",
          "type": "number",
          "format": "double"
        }
      },
      "type": "object"
    },
    "Order": {
      "required": "{'orderId', 'items', 'recipient'}",
      "properties": {
        "id": {
          "description": "Unique id for this order",
          "type": "integer"
        },
        "merchantOrderId": {
          "description": "Order Id that belongs to the merchant",
          "type": "integer"
        },
        "merchantShippingMethod": {
          "description": "Optional: specify the desired shipping",
          "$ref": "#/definitions/MerchantShippingMethod"
        },
        "shippingCharge": {
          "description": "The cost FDC charged to ship this order",
          "type": "number",
          "format": "double"
        },
        "totalOz": {
          "type": "number",
          "format": "double"
        },
        "trackingNo": {
          "type": "string"
        },
        "orderedDate": {
          "description": "The date sent to FDC by a client signifying when the order was sent",
          "type": "string",
          "format": "date-time"
        },
        "recordedOn": {
          "description": "The date this order entered FDC's system",
          "type": "string",
          "format": "date-time"
        },
        "despatchDate": {
          "description": "The date this order was finished being packed",
          "type": "string",
          "format": "date-time"
        },
        "deliveryDate": {
          "description": "The date this order was delivered to the consignee",
          "type": "string",
          "format": "date-time"
        },
        "returnDate": {
          "description": "If this order was returned, the date that is arrived at our facility",
          "type": "string",
          "format": "date-time"
        },
        "merchant": {
          "description": "Partial entity that includes Id of the merchant this order belongs to",
          "$ref": "#/definitions/Merchant"
        },
        "warehouse": {
          "description": "Partial entity of the warehouse this order will ship from",
          "$ref": "#/definitions/Warehouse"
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "statuses": {
          "description": "A history of the status of this order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderStatus"
          }
        },
        "originalConsignee": {
          "description": "The shipping and contact information originally sent by the client",
          "$ref": "#/definitions/ContactInfo"
        },
        "validatedConsignee": {
          "description": "The shipping and contact information after being corrected and valid",
          "$ref": "#/definitions/ContactInfo"
        },
        "orderSkus": {
          "description": "A list of the original order skus sent by the client",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderSku"
          }
        },
        "rma": {},
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderStatusEvent"
          }
        }
      },
      "type": "object"
    },
    "OrderItem": {
      "required": "",
      "properties": {
        "id": {
          "type": "integer"
        },
        "skuLegacy": {
          "type": "string"
        },
        "productId": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "lotNum": {
          "type": "integer"
        },
        "moItemId": {
          "type": "integer"
        },
        "declaredValue": {
          "type": "number",
          "format": "double"
        },
        "orderId": {
          "type": "integer"
        },
        "merchantId": {
          "type": "integer"
        },
        "sku": {
          "description": "SKU for the product",
          "$ref": "#/definitions/Sku"
        }
      },
      "type": "object"
    },
    "OrderSku": {
      "required": "{ }",
      "properties": {
        "id": {
          "type": "integer"
        },
        "merchantSku": {
          "description": "The identifier for a sku provided by the client",
          "type": "string"
        },
        "isValid": {
          "description": "Signifies whether the merchantSku provided matches a valid sku in our system",
          "type": "boolean"
        },
        "shouldIgnore": {
          "description": "If this is an ignored sku or a test sku this is true",
          "type": "boolean"
        },
        "reason": {
          "description": "If an OrderSku is invalid this property provides the reason why",
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "declaredValue": {
          "description": "The value of this item",
          "type": "number",
          "format": "double"
        },
        "order": {
          "description": "ID of the order",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrderStatus": {
      "required": "{ }",
      "properties": {
        "id": {
          "type": "integer"
        },
        "date": {
          "description": "Date this status was created",
          "type": "string",
          "format": "date-time"
        },
        "isSystemChange": {
          "type": "boolean"
        },
        "userId": {
          "type": "integer"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TrackingNumber": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "barcodeScanValue": {}
      },
      "type": "object"
    },
    "Product": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "ID for the product",
          "type": "integer"
        },
        "name": {
          "description": "Name of this product",
          "type": "string"
        },
        "description": {
          "description": "Description of this product",
          "type": "string"
        },
        "internalSku": {
          "description": "SKU used internally at FDC to identify this product",
          "type": "string"
        },
        "type": {
          "type": "integer"
        },
        "quantity": {
          "description": "The quantity of physical items in this product",
          "type": "integer"
        },
        "isActive": {
          "description": "Is this product active in the system?",
          "type": "boolean"
        },
        "isCharged": {
          "description": "Has this item been paid for?",
          "type": "boolean"
        },
        "skuProducts": {
          "description": "The SKUs for this product",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SkuProduct"
          }
        },
        "merchant": {
          "description": "Id of the merchant this product belongs to",
          "$ref": "#/definitions/Merchant"
        },
        "inventory": {
          "description": "Inventory for this product",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inventory"
          }
        },
        "productInserts": {
          "description": "Inserts associated with this product",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductInsert"
          }
        }
      },
      "type": "object"
    },
    "ProductInsert": {
      "required": "{'warehouseId','quantity','product','insert'}",
      "properties": {
        "id": {
          "description": "The unique identifier for the product insert",
          "type": "integer"
        },
        "quantity": {
          "description": "The quantity of products associated with the SKU",
          "type": "integer"
        },
        "productId": {
          "type": "integer"
        },
        "productInsertId": {
          "type": "integer"
        },
        "inventoryId": {
          "type": "integer"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "warehouseId": {
          "description": "The unique identifier for the warehouse this insert is located in",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportSubscription": {
      "required": "{'reportID', 'merchantID', 'email'}",
      "properties": {
        "id": {
          "description": "ID for the report subscription",
          "type": "integer"
        },
        "report": {
          "description": "The report ID for this subscription"
        },
        "merchant": {
          "description": "The merchant ID for this subscription",
          "$ref": "#/definitions/Merchant"
        },
        "createdBy": {
          "description": "The ID of the user that created this subscription",
          "$ref": "#/definitions/User"
        },
        "createdAt": {
          "description": "Date the subscription was created.",
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "description": "Email for the subscription",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ShippingContainer": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "ShippingContainer unique identifier",
          "type": "integer"
        },
        "shippingContainerType": {
          "description": "The type of shipping container",
          "$ref": "#/definitions/ShippingContainerType"
        },
        "product": {
          "description": "The product for the shipping container",
          "$ref": "#/definitions/Product"
        },
        "service": {
          "$ref": "#/definitions/Service"
        },
        "weightType": {},
        "maxWeight": {
          "type": "number",
          "format": "float"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "ShippingContainerType": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "*/",
          "type": "integer"
        },
        "name": {
          "description": "*/",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Sku": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "Unique identifier for this SKU",
          "type": "integer"
        },
        "name": {
          "description": "The name of this SKU",
          "type": "string"
        },
        "merchantId": {
          "type": "integer"
        },
        "productCount": {
          "description": "Number of products associated with this sku",
          "type": "integer"
        },
        "merchant": {
          "description": "Partial object containing the Id of the merchant",
          "$ref": "#/definitions/Merchant"
        },
        "skuProducts": {
          "description": "Products and their quantities associated with this SKU",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SkuProduct"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "SkuProduct": {
      "required": "{ }",
      "properties": {
        "quantity": {
          "description": "The quantity of products associated with the SKU",
          "type": "integer"
        },
        "productId": {
          "description": "The unique identifier for the associated product",
          "type": "integer"
        },
        "skuId": {
          "description": "The unique identifier for the associated SKU",
          "type": "integer"
        },
        "sku": {
          "description": "The SKU",
          "$ref": "#/definitions/Sku"
        },
        "product": {
          "description": "The Product",
          "$ref": "#/definitions/Product"
        }
      },
      "type": "object"
    },
    "Carrier": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CarrierMethod"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        }
      },
      "type": "object"
    },
    "CarrierMethod": {
      "required": "{'warehouseId','merchantId','iso2','merchantMethod','carrierMethod'}",
      "properties": {
        "id": {
          "type": "integer"
        },
        "warehouse": {
          "description": "Partial for the warehouse this carrier method applies to",
          "$ref": "#/definitions/Warehouse"
        },
        "merchant": {
          "description": "Partial for the merchant who owns this carrier method",
          "$ref": "#/definitions/Merchant"
        },
        "carrierName": {
          "description": "Name of the carrier that owns this method",
          "type": "string"
        },
        "carrierMethod": {
          "$ref": "#/definitions/CarrierMethod"
        },
        "carrierMethodName": {
          "type": "string"
        },
        "minimumWeight": {
          "type": "number",
          "format": "float"
        },
        "maximumWeight": {
          "type": "number",
          "format": "float"
        },
        "priceUom": {
          "type": "number",
          "format": "float"
        },
        "shouldReprintPostage": {
          "type": "boolean"
        },
        "isTracked": {
          "type": "boolean"
        },
        "isActive": {
          "type": "boolean"
        },
        "isFlat": {
          "type": "boolean"
        },
        "isDomestic": {
          "type": "boolean"
        },
        "isIntUsa": {
          "type": "boolean"
        },
        "isEU": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "recordedOn": {
          "type": "string",
          "format": "date-time"
        },
        "systemRate": {
          "type": "number",
          "format": "float"
        },
        "binId": {
          "type": "integer"
        },
        "carrier": {
          "$ref": "#/definitions/Carrier"
        }
      },
      "type": "object"
    },
    "Country": {
      "properties": {
        "id": {
          "description": "Name of the country",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "iso2": {
          "description": "ISO-2 for this country",
          "type": "string"
        },
        "iso3": {
          "type": "string"
        },
        "isEU": {
          "type": "boolean"
        },
        "isUK": {
          "type": "boolean"
        },
        "isUSTerritory": {
          "type": "boolean"
        },
        "warehousePreferences": {
          "$ref": "#/definitions/Warehouse"
        }
      },
      "type": "object"
    },
    "FIPStatus": {
      "required": "{'orderId', 'items', 'recipient'}",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MerchantShippingMethod": {
      "required": "{'warehouse','merchant','iso2','merchantMethod','carrierMethod'}",
      "properties": {
        "id": {
          "description": "The id of the warehouse associated with this method",
          "type": "integer"
        },
        "warehouse": {
          "description": "The id of the warehouse associated with this method",
          "type": "integer"
        },
        "merchant": {
          "description": "The id of the merchant associated with this method",
          "type": "integer"
        },
        "iso2": {
          "description": "The country ISO associated with this method",
          "type": "string"
        },
        "merchantMethod": {
          "description": "The name of this method",
          "type": "string"
        },
        "carrierMethod": {
          "description": "The carrier method id associated with this method",
          "type": "integer"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "recordedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "OrderStatusEvent": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "Unique id for this event",
          "type": "integer"
        },
        "eventName": {
          "description": "Name for this event",
          "type": "string"
        },
        "createdAt": {
          "description": "Date this event occurred",
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "description": "Location of the event",
          "type": "string"
        },
        "source": {
          "description": "Source of the event",
          "type": "string"
        },
        "createdBy": {
          "description": "Name of the user that performed the event",
          "$ref": "#/definitions/User"
        },
        "mappedStatus": {
          "description": "Leave blank. This is the status Fulfilment Devs will map the status to",
          "type": "string"
        },
        "comment": {
          "description": "Any comment about the status to assist in it's description",
          "type": "string"
        },
        "order": {
          "description": "OrderId",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Service": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "carrier": {
          "$ref": "#/definitions/Carrier"
        }
      },
      "type": "object"
    },
    "Shipper": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "Unique id for this status",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "isClosed": {
          "description": "If this status signifies the order is closed",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TrackingEvent": {
      "required": "{ }",
      "properties": {
        "trackingNumber": {
          "description": "Tracking Number for this Tracking Event",
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "statusCategory": {
          "type": "string"
        },
        "isUtc": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TrackingSummary": {
      "required": "{ }",
      "properties": {
        "trackingNumber": {
          "type": "string"
        },
        "parentTrackingNumber": {
          "type": "string"
        },
        "carrier": {
          "type": "string"
        },
        "carrierShippingClass": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "lastCarrierStatus": {
          "type": "string"
        },
        "lastStatusCategory": {
          "type": "string"
        },
        "lastStatusDateTime": {
          "type": "string"
        },
        "lastStatusMessage": {
          "type": "string"
        },
        "lastCheckedDateTime": {
          "type": "string"
        },
        "lastUpdatedDateTime": {
          "type": "string"
        },
        "firstAddedDateTime": {
          "type": "string"
        },
        "fdcOrderId": {
          "type": "integer"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrackingEvent"
          }
        }
      },
      "type": "object"
    },
    "User": {
      "required": "{'id'}",
      "properties": {
        "id": {
          "description": "User unique identifier",
          "type": "integer"
        },
        "merchantId": {
          "description": "Id of the merchant user belongs to",
          "type": "integer"
        },
        "name": {
          "description": "Name of the user",
          "type": "string"
        },
        "username": {
          "description": "User's email",
          "type": "string"
        },
        "deptLeader": {
          "type": "boolean"
        },
        "createDate": {
          "type": "string"
        },
        "contactInfo": {
          "description": "Contact information for a user",
          "$ref": "#/definitions/ContactInfo"
        },
        "roles": {
          "description": "Roles attached to this user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        }
      },
      "type": "object"
    },
    "Warehouse": {
      "required": "{ }",
      "properties": {
        "id": {
          "description": "Unique identifier for this warehouse",
          "type": "integer"
        },
        "name": {
          "description": "The full name of the warehouse",
          "type": "string"
        },
        "shortName": {
          "description": "The short name of the warehouse",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "shipper": {
          "type": "string"
        },
        "returnAddressLine1": {
          "type": "string"
        },
        "returnCity": {
          "type": "string"
        },
        "returnState": {
          "type": "string"
        },
        "returnZip": {
          "type": "string"
        },
        "merchantFees": {
          "$ref": "#/definitions/MerchantFees"
        },
        "webhookCredentials": {
          "$ref": "#/definitions/WebhookCredentials"
        },
        "checkInventoryIntegrity": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "WarehouseFee": {
      "required": "{'fulfillmentFee','pickingFee','kittingFee','printingFee','returnFee'}",
      "properties": {
        "id": {
          "description": "Unique identifier for this warehouse fees",
          "type": "integer"
        },
        "name": {
          "description": "The (optional) name of the warehouse fee",
          "type": "string"
        },
        "fulfillmentFee": {
          "description": "Fee for fulfillment",
          "type": "number",
          "format": "float"
        },
        "pickingFee": {
          "description": "Fee for picking",
          "type": "number",
          "format": "float"
        },
        "kittingFee": {
          "description": "Fee for kitting",
          "type": "number",
          "format": "float"
        },
        "printingFee": {
          "description": "Fee for printing",
          "type": "number",
          "format": "float"
        },
        "returnFee": {
          "description": "Fee for returns",
          "type": "number",
          "format": "float"
        },
        "isDefault": {
          "description": "Default fee for this warehouse",
          "type": "boolean"
        },
        "warehouse": {
          "$ref": "#/definitions/Warehouse"
        }
      },
      "type": "object"
    },
    "WebhookCredentials": {
      "required": "{'endpoint', 'environment'}",
      "properties": {
        "id": {
          "description": "Unique Webhook Credentials identifier",
          "type": "integer"
        },
        "endpoint": {
          "description": "Endpoint of the webhook",
          "type": "string"
        },
        "user": {
          "description": "Username of the credentials\"",
          "$ref": "#/definitions/User"
        },
        "password": {
          "description": "Password unique identifier",
          "type": "string"
        },
        "grantType": {
          "description": "Grant type: Either Authorization Code, Implicit, Password, Client Credentials",
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "merchants": {
          "$ref": "#/definitions/Merchant"
        }
      },
      "type": "object"
    },
    "SwagInsert": {
      "required": "{ }",
      "properties": {
        "name": {
          "description": "Name of the insert",
          "type": "string"
        },
        "description": {
          "description": "Description of the insert",
          "type": "string"
        },
        "type": {
          "description": "Type of insert",
          "type": "string"
        },
        "weight": {
          "description": "The weight of the insert in OUNCES",
          "type": "number",
          "format": "float"
        }
      },
      "type": "object"
    },
    "SwaggerEntityPartial": {
      "properties": {
        "id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateFipStatus": {
      "required": "{'fipStatusId','notes'}",
      "properties": {
        "fipStatusId": {
          "type": "integer"
        },
        "notes": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ac": {
      "required": "{ }",
      "type": "object"
    },
    "newContactInfo": {
      "required": "{'firstName','lastName','email','phone','address1','city','state','zip','country'}",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "integer"
        },
        "fax": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "newOrder": {
      "required": "{'merchantOrderId','items','recipient','shippingMethod'}",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "merchantOrderId": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/newOrderItem"
        },
        "recipient": {
          "$ref": "#/definitions/newContactInfo"
        },
        "shippingMethod": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "newOrderItem": {
      "required": "{'sku', 'declaredValue', 'quantity'}",
      "properties": {
        "quantity": {
          "type": "integer"
        },
        "sku": {
          "type": "string"
        },
        "declaredValue": {
          "type": "number",
          "format": "double"
        }
      },
      "type": "object"
    },
    "trackingInfo": {
      "required": "{ }",
      "properties": {
        "summary": {
          "$ref": "#/definitions/TrackingSummary"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrackingEvent"
          }
        }
      },
      "type": "object"
    },
    "CreateShippingContainerRequest": {
      "required": [
        "shippingContainerTypeId",
        "productId"
      ]
    }
  },
  "parameters": {
    "authHeader": {
      "name": "Authorization",
      "in": "header",
      "description": "Access token required to authenticate the request",
      "required": true,
      "type": "string"
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "Number of results to return per page </br> <strong>default 80, max 200</strong>",
      "required": false,
      "type": "integer"
    },
    "pageIndex": {
      "name": "page",
      "in": "query",
      "description": "Index of page results to return",
      "required": false,
      "type": "integer"
    }
  }
}